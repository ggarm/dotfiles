# .rtorrent.rc
# Author: Ricardo Costa

# Maximum and minimum number of peers to connect to per torrent, down and seed.
min_peers = 40
max_peers = 100
min_peers_seed = 40
max_peers_seed = 50

# Maximum number of simultanious uploads per torrent.
max_uploads = 15

# Global upload and download rate in KiB. "0" for unlimited.
download_rate = 0
upload_rate = 25

# Default directory to save the downloaded torrents.
directory ="~/Downloads/Completed/"
# Default session directory.
session ="~/Downloads/Torrents/"

# Port range to use for listening.
port_range = 62575-62575
port_random = no

# Check hash for finished torrents.
check_hash = yes

# Set wherever the client should try to connect to UDP trackers.
use_udp_trackers = yes

# Enable DHT support for trackerless torrents or when all trackers are down.
# May be set to "disable" (completely disable DHT), "off" (do not start DHT),
# "auto" (start and stop DHT as needed), or "on" (start DHT immediately).
# The default is "off". For DHT to work, a session directory must be defined.
dht = auto

# UDP port to use for DHT. 
dht_port = 6881

# First and only argument to rtorrent_mail.sh is completed file's name (d.get_name)
system.method.set_key = event.download.finished,notify_me,"execute=~/bin/down-complete.sh,$d.get_name="

# Close torrents when diskspace is low.
schedule = low_diskspace,5,60,close_low_diskspace=100M

# Watch a directory for new torrents, and stop those that have been deleted.
schedule = watch_directory,10,10,load_start=~/Downloads/Torrents/*.torrent
schedule = tied_directory,10,10,start_tied=~/Downloads/Torrents/*.torrent
schedule = untied_directory,10,10,close_untied=~/Downloads/Torrents/*.torrent

# Permissions on socket (for scgi_local)
#schedule = chmod,0,0,"execute=chmod,777,/tmp/rpc.socket"

# for the rutorrent interface
scgi_port = 127.0.0.1:5000
#scgi_local = "/tmp/rpc.socket"

#						<<DISABLED>>				{{{
# Stop torrents when reaching upload ratio in percent,
# when also reaching total upload in bytes, or when
# reaching final upload ratio in percent.
# example: stop at ratio 2.0 with at least 200 MB uploaded, or else ratio 20.0
#schedule = ratio,60,60,stop_on_ratio=200,200M,2000

# The ip address reported to the tracker.
#ip = 127.0.0.1
#ip = blabla.com

# The ip address the listening socket and outgoing connections is bound to.
#bind = 127.0.0.1
#bind = rakshasa.no

#connection_leech = seed

# Alternative calls to bind and ip that should handle dynamic ip's.
#schedule = ip_tick,0,1800,ip=rakshasa
#schedule = bind_tick,0,1800,bind=rakshasa

# Encoding
#encoding_list = UTF-8

# Encryption options, set to none (default) or any combination of the following:
# allow_incoming, try_outgoing, require, require_RC4, enable_retry, prefer_plaintext
#
# The example value allows incoming encrypted connections, starts unencrypted
# outgoing connections but retries with encryption if they fail, preferring
# plaintext to RC4 encryption after the encrypted handshake
#
encryption = allow_incoming,enable_retry,prefer_plaintext
# }}}
#						<<ATTENTION>>				{{{
# Do not modify the following parameters unless you know what you're doing.
#

# Hash read-ahead controls how many MB to request the kernel to read
# ahead. If the value is too low the disk may not be fully utilized,
# while if too high the kernel might not be able to keep the 
# pages in memory thus end up trashing.
#hash_read_ahead = 10

# Interval between attempts to check the hash, in milliseconds.
#hash_interval = 100

# Number of attempts to check the hash while using the mincore status,
# before forcing. Overworked systems might need lower values to get a
# decent hash checking rate.
#hash_max_tries = 10

# Max number of files to keep open simultaniously.
#max_open_files = 128

# Number of sockets to simultaneously keep open.
#max_open_sockets = <no default>

# Example of scheduling commands: Switch between two ip's every 5
# seconds.
#schedule = "ip_tick1,5,10,ip=torretta"
#schedule = "ip_tick2,10,10,ip=lampedusa"

# Remove a scheduled event.
#schedule_remove = "ip_tick1"
# }}}

# vim:syntax=sh
